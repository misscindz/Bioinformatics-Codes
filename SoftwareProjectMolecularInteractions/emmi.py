#!/usr/bin/python
# -*- coding: utf-8 -*-


import sys
# Zum Einlesen der Kommandozeilenparameter.
import argparse
from argparse import RawTextHelpFormatter

# Zum Lesen der Dateien.
from read_xyz import readXYZ
from read_xyz import readXyzSimple
from read_xyz import readXYZSplit
# Used to read Covalence Radii from file
from read_rcov import readCov
# Zum Berechnen der Distanzen zwischen den Atomen
from calc_distance import calculateDistances
# Elemente des Periodensystems
from parameters import getElements

# Unsere Funktionen
from born import calcBornEnergy
from electrostatics import calculateElectrostaticEnergy
from polarisation import calculatePolarisationEnergy
from hbond import calcHbonds
from hbond import calcHBondEnergy
from dispersion import calculateDispersionEnergy

from dispersion import getCoordinationNumber

from calc_neighbour import getNeighborMatrix

# Used to calculate patrital charges
from electrostatics import calculatePartialCharge

import numpy as np

sys.dont_write_bytecode = True

if __name__ == "__main__":
    # Default file
    inputFileName = ""
    dataPath = "./data/sw_project_data/"

    dispersionEnergy = 0.0
    electrostaticsEnergy = 0.0
    bornEnergy = 0.0
    polarisationEnergy = 0.0
    hbondEnergy = 0.0

    ''' Input data from file.'''
    # [char], length n.
    atomTypes = None
    # [Vektor], the vector consitsts out of x,y and z.
    atomPositions = None
    # Int, number of atoms in file.
    nAtoms = 0

    ''' Input data genereted from File.'''
    # [[double]], Matrix numberOfAtoms x numberOfAtoms
    distanceMatrix = None
    # [double], Kovalenzradien.
    covalenceRadii = []
    # ['H','He',...]
    elements = getElements()

    ''' Input generated by enery function.'''
    # [double]: [C_6^11,C_6^22, ...]
    dispersionCoefficient = []
    # [double], Partialladungen.
    partialCharges = None
    # [double], Koordinationszahlen
    coordinationNumber = None
    # Angstrom ('AA') or atomic unit ('AU')
    unit = "AA"
    #
    moleculeIds = None

    atomPositionsDict = {}
    atomTypesDict = {}
    moleculeIdsDict = {}
    energyDict = {
            "total": {},
            "bornEnergy": {},
            "electrostaticsEnergy": {},
            "hbondEnergy": {},
            "polarisationEnergy": {},
            "dispersionEnergy": {}
        }

    useCM5Correction = True

    ''' Flag, true ehen a single energie is not calculated.'''
    nod = False
    noe = False
    nob = False
    noh = False
    nop = False
    dse = False

    # ------------------------------------------------------------------
    # Interprets command line argument as molecule file.
    defaultInputFileName = "data/testDataEmmi/01_Water-Water.emmi"

    parser = argparse.ArgumentParser(
        description="Calculates " +
        " Energy term for molecular interactions.",
        formatter_class=RawTextHelpFormatter)
    # TODO nargs = ? nach nargs = 1
    # default entfernen
    parser.add_argument(
        'mf', type=str, nargs='?',
        help="Paths to the xyz-molecule-file for which the"
        + " Energy shall be calculated.\nThe file must be in the fol"
        + "lowing format:\n "
        + "\nLine 1:\t\t\t<number of atoms>\nLine 2:\t\t\tComment line\n"
        + "Line 3 and following:\t<Molecule id of atom> <x> <y> <z>"
        + "\n\t\t\t...",
        default=defaultInputFileName)
    parser.add_argument(
        "-nod", "--noDispersion", action="store_true",
        help="dispersion energiy is not calculated.")
    parser.add_argument(
        "-noe", "--noElectrostatics", action="store_true",
        help="electrostatic energiy is not calculated.")
    parser.add_argument(
        "-nob", "--noBorn", action="store_true",
        help="born energiy is not calculated.")
    parser.add_argument(
        "-noh", "--noHBondes", action="store_true",
        help="hBond energiy is not calculated.")
    parser.add_argument(
        "-nop", "--noPolarisation", action="store_true",
        help="polarisation energiy is not calculated.")
    parser.add_argument(
        "-dse", "--displaySingleEnergies",
        action="store_true",
        help="show the energie values out of which the all "
        + "in all energy consits.")
    parser.add_argument(
        "-nCM5", "--noCM5correction", action="store_true",
        help="no use of CM5 correction. (default: false).")
    args = parser.parse_args()

    if args.mf is not None:
        inputFileName = args.mf

    nod = args.noDispersion
    noe = args.noElectrostatics
    nob = args.noBorn
    noh = args.noHBondes
    nop = args.noPolarisation
    dse = args.displaySingleEnergies
    useCM5Correction = not args.noCM5correction
    # ------------------------------------------------------------------
    # Read files containing data
    if inputFileName.endswith("xyz"):
        try:
            with open(inputFileName, "r") as fin:
                (atomPositions, atomTypes,
                 nAtoms, moleculeIds, comment) = readXYZ(fin)
        except:
            with open(inputFileName, "r") as fin:
                atomPositions, atomTypes, nAtoms, comment = readXyzSimple(fin)
        atomPositionsDict = {0:atomPositions}
        atomTypesDict = {0:atomTypes}
        nAtmosDict = {0:n}
        moleculeIdsDict = {0:range(n)}
    else:
        with open(inputFileName, "r") as fin:
            (
                atomPositionsDict,
                atomTypesDict,
                nAtmosDict,
                moleculeIdsDict,
                comment
            ) = readXYZSplit(fin)

    # ------------------------------------------------------------------

    # Read in covalence radii from file in a list
    covalenceRadii = readCov(dataPath + "rcov.dat")

    # ------------------------------------------------------------------
    ''' Calculate dispersion, electrostatic and h-bond energy for
        single molecules. '''
    for k in atomPositionsDict.keys():
        if k != 0:
            atomPositions = np.array(atomPositionsDict[k])
            atomTypes = np.array(atomTypesDict[k])
            nAtoms = nAtmosDict[k]
            moleculeIds = moleculeIdsDict[k]
            # ------------------------------------------------------------------
            ''' Calculate values from input data. '''
            distanceMatrix = calculateDistances(atomPositions)

            coordinationNumber = getCoordinationNumber(
                nAtoms,
                atomTypes,
                distanceMatrix,
                covalenceRadii,
                elements)

            neighbourMatrix = getNeighborMatrix(
                nAtoms,
                atomTypes,
                distanceMatrix,
                covalenceRadii,
                elements)

            # ------------------------------------------------------------------

            partialCharges = calculatePartialCharge(
                nAtoms,
                atomTypes,
                elements,
                distanceMatrix,
                useCM5Correction)

            # -------------------------------------------------------------------
            # Calculate Energys

            if not nod:
                dispersionEnergy, dispersionCoefficient = calculateDispersionEnergy(
                    distanceMatrix,
                    nAtoms,
                    covalenceRadii,
                    elements,
                    atomTypes,
                    coordinationNumber)

            if not noe:
                electrostaticsEnergy = calculateElectrostaticEnergy(
                    nAtoms,
                    distanceMatrix,
                    partialCharges)

            if not noh:
                hbondEnergy = calcHbonds(
                    nAtoms,
                    atomTypes,
                    distanceMatrix,
                    elements,
                    neighbourMatrix,
                    covalenceRadii,
                    atomPositions,
                    coordinationNumber)

            energyDict["dispersionEnergy"][k] = dispersionEnergy
            energyDict["electrostaticsEnergy"][k] = electrostaticsEnergy
            energyDict["hbondEnergy"][k] = hbondEnergy

    ''' Calculate energy for molecule complex '''
    atomPositions = np.array(atomPositionsDict[0])
    atomTypes = np.array(atomTypesDict[0])
    nAtoms = nAtmosDict[0]
    moleculeIds = moleculeIdsDict[0]
    # ------------------------------------------------------------------
    # Calculate values from input data.
    distanceMatrix = calculateDistances(atomPositions)

    coordinationNumber = getCoordinationNumber(
        nAtoms,
        atomTypes,
        distanceMatrix,
        covalenceRadii,
        elements)

    neighbourMatrix = getNeighborMatrix(
        nAtoms,
        atomTypes,
        distanceMatrix,
        covalenceRadii,
        elements)

    # ------------------------------------------------------------------

    partialCharges = calculatePartialCharge(
        nAtoms,
        atomTypes,
        elements,
        distanceMatrix,
        useCM5Correction)

    # -------------------------------------------------------------------
    # Calculate Energies

    if not nod:
        dispersionEnergy, dispersionCoefficient = calculateDispersionEnergy(
            distanceMatrix,
            nAtoms,
            covalenceRadii,
            elements,
            atomTypes,
            coordinationNumber)
    else:
        _, dispersionCoefficient = calculateDispersionEnergy(
            distanceMatrix,
            nAtoms,
            covalenceRadii,
            elements,
            atomTypes,
            coordinationNumber)

    if not noe:
        electrostaticsEnergy = calculateElectrostaticEnergy(
            nAtoms,
            distanceMatrix,
            partialCharges)

    if not noh:
        hbondEnergy = calcHbonds(
            nAtoms,
            atomTypes,
            distanceMatrix,
            elements,
            neighbourMatrix,
            covalenceRadii,
            atomPositions,
            coordinationNumber)
    if not nob:
        bornEnergy = calcBornEnergy(
            nAtoms,
            atomTypes,
            distanceMatrix,
            covalenceRadii,
            elements,
            partialCharges,
            neighbourMatrix)

    if not nop:
        polarisationEnergy = calculatePolarisationEnergy(
            atomPositions,
            nAtoms,
            partialCharges,
            dispersionCoefficient,
            moleculeIds)

    dispersionEnergy = dispersionEnergy - sum(energyDict["dispersionEnergy"].values())
    electrostaticsEnergy = electrostaticsEnergy - sum(energyDict["electrostaticsEnergy"].values())
    hbondEnergy = hbondEnergy - sum(energyDict["hbondEnergy"].values())

    totalEnergy = polarisationEnergy\
                    + bornEnergy\
                    + dispersionEnergy\
                    + electrostaticsEnergy\
                    + hbondEnergy

    formatOfSingleEnergieValue = "{:25}\t{:30.3f} kcal/mol"

    print "{:.3f} kcal/mol".format(totalEnergy)
    if dse:
        print
        print formatOfSingleEnergieValue.format(
                "dispersion energy:", dispersionEnergy)
        print formatOfSingleEnergieValue.format(
                "electrostatic energy:", electrostaticsEnergy)
        print formatOfSingleEnergieValue.format("born energy:", bornEnergy)
        print formatOfSingleEnergieValue.format("hbond energy:", hbondEnergy)
        print formatOfSingleEnergieValue.format(
                "polarisation energy:", polarisationEnergy)
